#!/usr/bin/env python 
#
# Sudoku GUI
#
# Uses tkinter to  draw a simple GUI so that we can easy check the boards generated by the GA
# This draws heavily from the example at: http://newcoder.io/gui/part-3/
#
# GAS 10-11-17

from Tkinter import Tk, Canvas, Frame, Button, BOTH, TOP, BOTTOM



# Visual parameters
MARGIN = 20  # Pixels around the board
SIDE = 50  # Width of every board cell.
WIDTH = HEIGHT = MARGIN * 2 + SIDE * 9  # Width and height of the whole board
	
class SudokuUI(Frame):
	"""
	The Tkinter UI, responsible for drawing the board and accepting user input.
	"""
	
	def __init__(self, parent = Tk(), game = '', dimension_size = 3):
		global WIDTH
		global HEIGHT
		self.game = game
		self.parent = parent
		self.dimension_size = dimension_size
		
		# Scale the width and height of the board based off of the dimension size
		WIDTH = HEIGHT = MARGIN * 2 + SIDE * (self.dimension_size ** 2)
		self.parent.geometry("%dx%d" % (WIDTH, HEIGHT + 40))
		
		Frame.__init__(self, parent)
		
		self.row, self.col = 0, 0
		self.__initUI()
		
		self.parent.mainloop()

	def __initUI(self):
		self.parent.title("ID: {} \t Fitness: {}".format(self.game.ID, self.game.total_fitness))
		self.pack(fill=BOTH, expand=1)
		self.canvas = Canvas(self,
							width=WIDTH,
							height=HEIGHT)
		self.canvas.pack(fill=BOTH, side=TOP)
		
		self.__draw_grid()
		self.__draw_puzzle()
	
	def __draw_grid(self):
		"""
		Draws grid divided with blue lines into sqrt(n) by sqrt(n) squares
		"""
		for i in xrange( (self.dimension_size ** 2) + 1 ):
			color = "blue" if i % self.dimension_size == 0 else "gray"
			
			x0 = MARGIN + i * SIDE
			y0 = MARGIN
			x1 = MARGIN + i * SIDE
			y1 = HEIGHT - MARGIN
			self.canvas.create_line(x0, y0, x1, y1, fill=color)
			
			x0 = MARGIN
			y0 = MARGIN + i * SIDE
			x1 = WIDTH - MARGIN
			y1 = MARGIN + i * SIDE
			self.canvas.create_line(x0, y0, x1, y1, fill=color)
			
	def __draw_puzzle(self):
		self.canvas.delete("numbers")
		for i in xrange(self.dimension_size**2):
			for j in xrange(self.dimension_size**2):
				answer = self.game.puzzle[i][j]
				if answer != 0:
					x = MARGIN + j * SIDE + SIDE / 2
					y = MARGIN + i * SIDE + SIDE / 2
					
					# Set color based off of fitness of element
					if self.game.fitness_map[i][j] == 0:
						color = "black"
					elif self.game.fitness_map[i][j] == 1:
						color = "red"
					elif self.game.fitness_map[i][j] == 2:
						color = "blue"
					elif self.game.fitness_map[i][j] == 3:
						color = "green"
					else:
						print('Error - element in game has a fitness outside of [0,3]')
						exit()
					
					self.canvas.create_text(
						x, y, text=answer, tags="numbers", fill=color
					)
            
if __name__ == '__main__':
	SudokuUI()
	#root.geometry("%dx%d" % (WIDTH, HEIGHT + 40))
	#root.mainloop()
            
            
            
